//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;


public class ClassTable<R,A> implements GJVisitor<R,A> {

    int debug = 0;
    String curClass = null;
    String curMethod = null;

    public Map<String, classAttr> classTable = new HashMap<String, classAttr>();
    public Map<String, classAttr> finClassTable = new HashMap<String, classAttr>();

    // Auto class visitors--probably don't need to be overridden.

    public R visit(NodeList n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
            R _ret=null;
            int _count=0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this,argu);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return null;
    }

    public R visit(NodeSequence n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

    //
    // User-generated visitor methods below
    //

    void getParentVars(ArrayList<varAttr> vars, String cname)
    {
        if(cname==null) return;
        classAttr cattr = classTable.get(cname);

        for(varAttr vattr : cattr.varList)
        {
            vars.add(vattr.copy());
        }
        getParentVars(vars, cattr.parent);
    }

    void getParentMeths(ArrayList<methAttr> meths, String cname)
    {
        if(cname==null) return;
        classAttr cattr = classTable.get(cname);

        for(methAttr mattr : cattr.methList)
        {
            meths.add(mattr.copy());
        }
        getParentMeths(meths, cattr.parent);
    }

    ArrayList<varAttr> reverseVars(ArrayList<varAttr> arr)
    {
        ArrayList<varAttr> ret = new ArrayList<varAttr>();
        for(int i=arr.size()-1; i>=0; i--)
        {
            ret.add(arr.get(i));
        }
        return ret;
    }

    ArrayList<methAttr> reverseMeths(ArrayList<methAttr> arr)
    {
        ArrayList<methAttr> ret = new ArrayList<methAttr>();
        for(int i=arr.size()-1; i>=0; i--)
        {
            ret.add(arr.get(i));
        }
        return ret;
    }

    void finalTable()
    {
        for(String cname: classTable.keySet())
        {
            classAttr cattr = classTable.get(cname);
            classAttr fcattr = new classAttr(cattr.name,cattr.parent);

            getParentMeths(fcattr.methList, fcattr.name);
            fcattr.methList = reverseMeths(fcattr.methList);

            for(int i=0;i<fcattr.methList.size();i++)
            {
                methAttr mattr = fcattr.methList.get(i);
                mattr.offset = i*4;
                for(int j=0;j<mattr.argList.size();j++)
                {
                    varAttr vattr = mattr.argList.get(j);
                    vattr.loc = LOC.ARG;
                }
                for(int j=0;j<mattr.varList.size();j++)
                {
                    mattr.varList.get(j).loc = LOC.METHOD;
                }
            }

		    Map<String,String> mmap = new HashMap<String,String>();
            for(int i=fcattr.methList.size()-1;i>=0;i--)
            {
                methAttr mattr = fcattr.methList.get(i);
                if(!mmap.containsKey(mattr.name))
                {
                    mmap.put(mattr.name,mattr.cname);
                }
                mattr.code = mmap.get(mattr.name) + "_" + mattr.name;
            }
            
            getParentVars(fcattr.varList, fcattr.name);
            fcattr.varList = reverseVars(fcattr.varList);
            
            for(int i=0;i<fcattr.varList.size();i++)
            {
                varAttr vattr = fcattr.varList.get(i);
                vattr.offset = 4+4*i;
                vattr.loc = LOC.CLASS;
            }

            finClassTable.put(fcattr.name,fcattr);
        }
        classTable = finClassTable;
    }

    /** Goal!!!
         * f0 -> MainClass()
        * f1 -> ( TypeDeclaration() )*
        * f2 -> <EOF>
        */
    public R visit(Goal n, A argu) 
    {
        n.f0.accept(this, null);
        n.f1.accept(this, null);
        finalTable();
        if(debug>0)
        {
            for(String cname: classTable.keySet())
            {
                classAttr cattr = classTable.get(cname);
                System.out.println("Class: " + cname);
                for(varAttr var: cattr.varList) 
                {
                    System.out.println("\tVar: " + var.type +" " +var.name);
                }
                for(methAttr meth: cattr.methList) 
                {
                    System.out.println("\tMeth: " + meth.retType + " " + meth.name + " " + meth.offset);
                    for(varAttr var: meth.argList) 
                    {
                        System.out.println("\t\tArg: " + var.type +" " +var.name);
                    }
                    for(varAttr var: meth.varList) 
                    { 
                        System.out.println("\t\tVar: " + var.type +" " +var.name);
                    }
                }
            }
        }
        return null;
    }

    /** MainClass!!!
         * f0 -> "class"
        * f1 -> Identifier()
        * f2 -> "{"
        * f3 -> "public"
        * f4 -> "static"
        * f5 -> "void"
        * f6 -> "main"
        * f7 -> "("
        * f8 -> "String"
        * f9 -> "["
        * f10 -> "]"
        * f11 -> Identifier()
        * f12 -> ")"
        * f13 -> "{"
        * f14 -> PrintStatement()
        * f15 -> "}"
        * f16 -> "}"
        */
    public R visit(MainClass n, A argu) 
    {
        classAttr cattr = new classAttr(n.f1.f0.tokenImage, null);
        classTable.put(cattr.name, cattr);
        return null;
    }

    /**   TypeDeclaration!!!
         * f0 -> ClassDeclaration()
        *       | ClassExtendsDeclaration()
        */
    public R visit(TypeDeclaration n, A argu) 
    {
        n.f0.accept(this, null);
        return null;
    }

    /**   ClassDeclaration!!!
         * f0 -> "class"
        * f1 -> Identifier()
        * f2 -> "{"
        * f3 -> ( VarDeclaration() )*
        * f4 -> ( MethodDeclaration() )*
        * f5 -> "}"
        */
    public R visit(ClassDeclaration n, A argu) 
    {
        curClass = n.f1.f0.tokenImage;
        classAttr cattr = new classAttr(curClass, null);
        n.f3.accept(this, (A)cattr.varList);
        n.f4.accept(this, (A)cattr.methList);
        classTable.put(cattr.name, cattr);
        curClass = null;
        return null;
    }

    /**   ClassExtendsDeclaration!!!
         * f0 -> "class"
        * f1 -> Identifier()
        * f2 -> "extends"
        * f3 -> Identifier()
        * f4 -> "{"
        * f5 -> ( VarDeclaration() )*
        * f6 -> ( MethodDeclaration() )*
        * f7 -> "}"
        */
    public R visit(ClassExtendsDeclaration n, A argu) 
    {
        curClass = n.f1.f0.tokenImage;
        classAttr cattr = new classAttr(curClass, n.f3.f0.tokenImage);
        n.f5.accept(this, (A)cattr.varList);
        n.f6.accept(this, (A)cattr.methList);
        classTable.put(cattr.name, cattr);
        curClass = null;
        return null;
    }

    /**   VarDeclaration!!!
         * f0 -> Type()
        * f1 -> Identifier()
        * f2 -> ";"
        */
    public R visit(VarDeclaration n, A argu) 
    {
        ArrayList<varAttr> vlist = (ArrayList<varAttr>)argu;
        vlist.add(new varAttr(n.f1.f0.tokenImage,(String)n.f0.accept(this, null), curClass, curMethod));
        return null;
    }

    /**   MethodDeclaration!!!
         * f0 -> "public"
        * f1 -> Type()
        * f2 -> Identifier()
        * f3 -> "("
        * f4 -> ( FormalParameterList() )?
        * f5 -> ")"
        * f6 -> "{"
        * f7 -> ( VarDeclaration() )*
        * f8 -> ( Statement() )*
        * f9 -> "return"
        * f10 -> Expression()
        * f11 -> ";"
        * f12 -> "}"
        */
    public R visit(MethodDeclaration n, A argu) 
    {
        curMethod = n.f2.f0.tokenImage;
        ArrayList<methAttr> mlist = (ArrayList<methAttr>)argu;
        methAttr mattr = new methAttr(curMethod, (String)n.f1.accept(this, null), curClass);
        n.f4.accept(this, (A)mattr.argList);
        n.f7.accept(this, (A)mattr.varList);
        mlist.add(mattr);
        curMethod = null;
        return null;
    }

    /**   FormalParameterList!!!
         * f0 -> FormalParameter()
        * f1 -> ( FormalParameterRest() )*
        */
    public R visit(FormalParameterList n, A argu) 
    {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return null;
    }

    /**   FormalParameter!!!
         * f0 -> Type()
        * f1 -> Identifier()
        */
    public R visit(FormalParameter n, A argu) 
    {
        ArrayList<varAttr> alist = (ArrayList<varAttr>)argu;
        alist.add(new varAttr(n.f1.f0.tokenImage,(String)n.f0.accept(this,null) ,curClass, curMethod));
        return null;
    }

    /**   FormalParameterRest!!!
         * f0 -> ","
        * f1 -> FormalParameter()
        */
    public R visit(FormalParameterRest n, A argu) 
    {
        n.f0.accept(this, null);
        n.f1.accept(this, argu);
        return null;
    }

    /**   Type!!!
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
    public R visit(Type n, A argu) 
    {
        return n.f0.accept(this, argu);
    }

    /**   ArrayType!!!
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
    public R visit(ArrayType n, A argu) 
    {
        return (R)"int[]";
    }

    /**  BooleanType!!!
    * f0 -> "boolean"
    */
    public R visit(BooleanType n, A argu) 
    {
        return (R)"boolean";
    }

    /**   IntegerType!!!
    * f0 -> "int"
    */
    public R visit(IntegerType n, A argu) 
    {
        return (R)"int";
    }

    /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
    public R visit(Statement n, A argu) {
        return null;
    }

    /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
    public R visit(Block n, A argu) {
        return null;
    }

    /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
    public R visit(AssignmentStatement n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
    public R visit(ArrayAssignmentStatement n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
    public R visit(IfStatement n, A argu) {
        return null;
    }

    /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
    public R visit(IfthenStatement n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
    public R visit(IfthenElseStatement n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
    public R visit(WhileStatement n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
    public R visit(PrintStatement n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
    public R visit(Expression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
    public R visit(AndExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
    public R visit(OrExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
    public R visit(CompareExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
    public R visit(neqExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
    public R visit(PlusExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
    public R visit(MinusExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
    public R visit(TimesExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
    public R visit(DivExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
    public R visit(ArrayLookup n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
    public R visit(ArrayLength n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
    public R visit(MessageSend n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
    public R visit(ExpressionList n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> ","
    * f1 -> Expression()
    */
    public R visit(ExpressionRest n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
    public R visit(PrimaryExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> <INTEGER_LITERAL>
    */
    public R visit(IntegerLiteral n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> "true"
    */
    public R visit(TrueLiteral n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> "false"
    */
    public R visit(FalseLiteral n, A argu) 
    {
        return null;
    }

    /**   Identifier!!!
    * f0 -> <IDENTIFIER>
    */
    public R visit(Identifier n, A argu) 
    {
        return n.f0.accept(this, argu);
    }

    /**
    * f0 -> "this"
    */
    public R visit(ThisExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
    public R visit(ArrayAllocationExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
    public R visit(AllocationExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> "!"
    * f1 -> Expression()
    */
    public R visit(NotExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
    public R visit(BracketExpression n, A argu) 
    {
        return null;
    }

    /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
    public R visit(IdentifierList n, A argu) {
        return null;
    }

    /**
    * f0 -> ","
    * f1 -> Identifier()
    */
    public R visit(IdentifierRest n, A argu) {
        return null;
    }

}
