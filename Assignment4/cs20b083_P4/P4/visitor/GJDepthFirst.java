//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<String,Integer> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //

	public SymbolTable st = new SymbolTable();
	String fname;
    funcAttr curFunc;
	int lc = 0;
	Boolean print_label = false;
    int debug = 0;
    int curStackPointer = 0;
	int INDEX = -1;
	int V0 = -2;
	int V1 = -3;

	void print(String s) {
		System.out.println(s);
	}
		
	public String visit(NodeList n, Integer argu) {
		String _ret=null;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
		}
		return _ret;
	}

	public String visit(NodeListOptional n, Integer argu) {
		if ( n.present() ) {
			String _ret=null;
			Integer _count=argu;
			for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
				e.nextElement().accept(this,_count);
				if(_count!=null) _count++;
			}
			return _ret;
		}
		else
			return null;
	}

	public String visit(NodeOptional n, Integer argu) {
		if ( n.present() )
		{
			n.node.accept(this,argu);
		}
		return null;
	}

	public String visit(NodeSequence n, Integer argu) {
		String _ret=null;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
		}
		return _ret;
	}
	
	public String visit(NodeToken n, Integer argu) { return n.tokenImage; }
	
	//
		// User-generated visitor methods below
		//

		
	/** >Goal ::= MAIN StmtList() END ( Procedure() )* <EOF>
		* f0 -> "MAIN"
		* f1 -> StmtList()
		* f2 -> "END"
		* f3 -> ( Procedure() )*
		* f4 -> <EOF>
		*/
	public String visit(Goal n, Integer argu) 
	{
		if(debug>0) st.print();
		lc = 0;
		fname = "MAIN";
        curFunc = st.funcTable.get("MAIN");
		curStackPointer = curFunc.curStackPointer;
        print("MAIN"+" ["+curFunc.numArgs+"] ["+curFunc.maxStackSpace+"] ["+curFunc.maxArgs+"]");
		
		n.f1.accept(this, null);
    	print("END");
        
		if(curFunc.spilledTemps.size()>0) print("//SPILLED");
        else print("//NOTSPILLED");
		
		n.f3.accept(this, null);
		return null;
	}

	/** >Procedure
		* f0 -> Label()
		* f1 -> "["
		* f2 -> IntegerLiteral()
		* f3 -> "]"
		* f4 -> StmtExp()
		*/
	public String visit(Procedure n, Integer argu) 
	{
		lc = 0;
		print("\n");
		fname = n.f0.f0.tokenImage;
        curFunc = st.funcTable.get(fname);
		curStackPointer = curFunc.curStackPointer;
        print(fname+" ["+curFunc.numArgs+"] ["+curFunc.maxStackSpace+"] ["+curFunc.maxArgs+"]");
        
		for(int i=0;i<8;i++)
			print("\tASTORE SPILLEDARG "+curStackPointer+++" s"+i);

        curFunc.transfer_args(lc);
		n.f4.accept(this, null);

        for(int i=7;i>=0;i--)
            print("\tALOAD s"+i+" SPILLEDARG "+--curStackPointer);

		print("END");
        if(curFunc.spilledTemps.size()>0) print("//SPILLED");
        else print("//NOTSPILLED");
		return null;
	}

    /** >StmtExp
		* f0 -> "BEGIN"
		* f1 -> StmtList()
		* f2 -> "RETURN"
		* f3 -> SimpleExp()
		* f4 -> "END"
		*/
	public String visit(StmtExp n, Integer argu) 
	{
		n.f1.accept(this, null);
		String res = n.f3.accept(this, null);
        print("\tMOVE v0 "+res);
		return null;
	}
	
	/** >StmtList ::= ( ( Label() )? Stmt() )*
	 * f0 -> ( ( Label() )? Stmt() )*
	 */
	public String visit(StmtList n, Integer argu) 
	{
		print_label = true;
		n.f0.accept(this, null);
		print_label = false;
		return null;
	}
	
	/** >Stmt
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
    public String visit(Stmt n, Integer argu) 
	{
		print_label = false;
		n.f0.accept(this, null);
		print_label = true;
		lc++;
		return null;
	}

	/** >NoOpStmt ::= NOOP
		* f0 -> "NOOP"
		*/
	public String visit(NoOpStmt n, Integer argu) 
	{
		print("\tNOOP");
		return null;
	}

	/** >ErrorStmt ::= ERROR
		* f0 -> "ERROR"
		*/
	public String visit(ErrorStmt n, Integer argu) 
	{
		print("\tERROR");
		return null;
	}

	/** >CJumpStmt ::= CJUMP Temp() Label()
		* f0 -> "CJUMP"
		* f1 -> Temp()
		* f2 -> Label()
		*/
	public String visit(CJumpStmt n, Integer argu) 
	{
		String t1 = n.f1.accept(this, V0);
        String lab = n.f2.accept(this, null);
        print("\tCJUMP " + t1 + " " + fname+"_"+lab);
		return null;
	}

	/** >JumpStmt ::= JUMP Label()
		* f0 -> "JUMP"
		* f1 -> Label()
		*/
	public String visit(JumpStmt n, Integer argu) 
	{
		String lab = n.f1.accept(this, null);
        print("\tJUMP " + fname+"_"+lab);
		return null;
	}

	/** >HStoreStmt ::= HSTORE Temp() IntegerLiteral() Temp()
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
	public String visit(HStoreStmt n, Integer argu) 
	{
        String t1 = n.f1.accept(this, V0);
        String t2 = n.f3.accept(this, V1);
        String offset = n.f2.accept(this, null);
        print("\tHSTORE " + t1 + " " + offset + " " + t2);
		return null;
	}

	/** >HLoadStmt ::= HLOAD Temp() Temp() IntegerLiteral()
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
	public String visit(HLoadStmt n, Integer argu) 
	{
		String t1 = n.f1.accept(this, INDEX);
		String t2 = n.f2.accept(this, V0);
        String offset = n.f3.accept(this, null);
        print("\tHLOAD v0"+" "+t2+" "+offset);
        curFunc.store(t1,"v0",lc);
		return null;
	}

	/** >MoveStmt ::= MOVE Temp() Exp()
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
	public String visit(MoveStmt n, Integer argu) 
	{
        curFunc.store(n.f1.accept(this, INDEX), n.f2.accept(this, null), lc);
		return null;
	}

	/** >PrintStmt ::= PRINT SimpleExp()
		* f0 -> "PRINT"
		* f1 -> SimpleExp()
		*/
	public String visit(PrintStmt n, Integer argu) 
	{
		print("\tPRINT "+n.f1.accept(this, null));
		return null;
	}

	/** >Exp
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
	public String visit(Exp n, Integer argu) 
	{
		return n.f0.accept(this, null);
	}

	/** >Call
		* f0 -> "CALL"
		* f1 -> SimpleExp()
		* f2 -> "("
		* f3 -> ( Temp() )*
		* f4 -> ")"
		*/
	public String visit(Call n, Integer argu) 
	{
        Integer arg = 0;
		n.f3.accept(this, arg);

        for(int i=0;i<10;i++)
			print("\tASTORE SPILLEDARG "+curStackPointer+++" t"+i);

		print("\tCALL "+n.f1.accept(this, null));

        for(int i=9;i>=0;i--)
            print("\tALOAD t"+i+" SPILLEDARG "+--curStackPointer);

        return "v0";
	}

	/** >HAllocate ::= HALLOCATE SimpleExp()
		* f0 -> "HALLOCATE"
		* f1 -> SimpleExp()
		*/
	public String visit(HAllocate n, Integer argu) 
	{
		return "HALLOCATE "+n.f1.accept(this, null);
	}

	/** >BinOp ::= Operator Temp() SimpleExp()
		* f0 -> Operator()
		* f1 -> Temp()
		* f2 -> SimpleExp()
		*/
	public String visit(BinOp n, Integer argu) 
	{
		String op = n.f0.accept(this, null);
		String t1 = n.f1.accept(this, V1);
		String t2 = n.f2.accept(this, null);
		return op+" "+t1+" "+t2;
	}

	/** >Operator ::= LE|NE|PLUS|MINUS|TIMES|DIV
		* f0 -> "LE"
		*       | "NE"
		*       | "PLUS"
		*       | "MINUS"
		*       | "TIMES"
		*       | "DIV"
		*/
	public String visit(Operator n, Integer argu) 
	{
		return n.f0.accept(this, null);
	}

	/** >SimpleExp() ::= Temp() | IntegerLiteral() | Label()
		* f0 -> Temp()
		*       | IntegerLiteral()
		*       | Label()
		*/
	public String visit(SimpleExp n, Integer argu) 
	{
		return n.f0.accept(this, V0);
	}

	/** >Temp() ::= "TEMP" IntegerLiteral()
		* f0 -> "TEMP"
		* f1 -> IntegerLiteral()
		*/
	public String visit(Temp n, Integer argu) 
    {
        if(argu==INDEX) return n.f1.accept(this, null);

        String reg = "v0";
        if(argu==V1) reg="v1";

        Integer i = Integer.parseInt(n.f1.accept(this, null));
        reg = curFunc.getTemp(i, reg, lc);

        if(argu>=0)
        {
            Integer arg_num = argu;
            if(arg_num<4) print("\tMOVE a"+arg_num+" "+reg);
            else print("\tPASSARG "+(arg_num-3)+" "+reg);
        }
        return reg;
	}

	/** >IntegerLiteral() ::= <INTEGER_LITERAL>
		* f0 -> <INTEGER_LITERAL>
		*/
	public String visit(IntegerLiteral n, Integer argu) 
	{
        return n.f0.tokenImage;
	}

	/** >Label() ::= <IDENTIFIER>
		* f0 -> <IDENTIFIER>
		*/
	public String visit(Label n, Integer argu) 
	{
        if(print_label) print(fname+"_"+n.f0.tokenImage);
		return n.f0.tokenImage;
	}
}